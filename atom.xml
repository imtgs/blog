<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-16T08:33:58.214Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用 Git 命令清单</title>
    <link href="http://example.com/5fddf106.md/"/>
    <id>http://example.com/5fddf106.md/</id>
    <published>2024-08-23T03:38:48.000Z</published>
    <updated>2024-09-16T08:33:58.214Z</updated>
    
    <content type="html"><![CDATA[<p>来自阮一峰老师的<a class="link"   href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" >常用 Git 命令清单 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，按照自由转载-非商用-非衍生-保持署名（创意共享 3.0 许可证）进行转载，仅修改了开头的无用内容（应该没事吧）。</p><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init [project-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git 的设置文件为 <code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前的Git配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --list</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑Git配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config -e [--global]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span></span><br></pre></td></tr></table></figure></div><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定文件到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add [file1] [file2] ...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add [<span class="built_in">dir</span>]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -p</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> [file1] [file2] ...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure></div><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区到仓库区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m [message]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -a</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交时显示所有diff信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -v</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend -m [message]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure></div><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch] [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure></div><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个tag在当前commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag [tag]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个tag在指定commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag [tag] [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -d [tag]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/[tagName]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tag信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [tag]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交指定tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push [remote] [tag]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交所有tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push [remote] --tags</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure></div><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示有变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的版本历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git whatchanged [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示过去5次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git shortlog -sn</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git blame [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --cached [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff HEAD</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示两次提交之间的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff [first-branch]...[second-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show --name-only [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [commit]:[filename]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br></pre></td></tr></table></figure></div><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载远程仓库的所有变动</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch [remote]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个远程仓库的信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote show [remote]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add [shortname] [url]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull [remote] [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push [remote] [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push [remote] --force</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送所有分支到远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push [remote] --all</span></span><br></pre></td></tr></table></figure></div><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [commit] [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout .</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset [file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --keep [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash pop</span></span><br></pre></td></tr></table></figure></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成一个可供发布的压缩包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git archive</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来自阮一峰老师的&lt;a class=&quot;link&quot;   href=&quot;https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot; &gt;常用 Git 命令清单 &lt;i class=&quot;fa-regular fa-arrow-</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>解决 Serv00 下兰空图床使用本地储存时访问图片 403</title>
    <link href="http://example.com/fbcfe784.md/"/>
    <id>http://example.com/fbcfe784.md/</id>
    <published>2024-08-19T05:50:51.000Z</published>
    <updated>2024-09-16T08:45:43.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近我折腾起了 <a class="link"   href="https://www.serv00.com/" >Serv00 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这东西，关于 Serv00 是什么，可以看<a class="link"   href="https://linux.do/t/topic/43121" >这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，总而言之就是个免费 VPS，好像国内只有 <a class="link"   href="https://linux.do/" >Linux.do <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 有这方面的内容。稍后我可能会写这方面的东西，可是马上要开学了。</p><p>我按照 Saika 大佬的<a class="link"   href="https://saika.us.kg/2024/01/27/serv00_logs/" >Serv00 搭建各种服务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>搭建了兰空图床（也就是 Lsky Pro），可正当我上传了第一个图片准备看一看时，结果它 403 了：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2e3d587c6b.png"                                     ></p><p>于是便有了这篇文章。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>复现的方法很简单，在使用兰空图床默认配置（使用<strong>本地储存</strong>）不对其改动的情况下，随便上传一个图片，引用或直接打开，即可复现该问题。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2e93e91a5f.gif"                                     ></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="什么是-403？"><a href="#什么是-403？" class="headerlink" title="什么是 403？"></a>什么是 403？</h3><p>要解决问题，首先要知道问题的本质。</p><blockquote><p>状态码 403 Forbidden 代表客户端错误，指的是服务器端有能力处理该请求，但是拒绝授权访问。[^1]<br>这个状态类似于 401，但进入 403 状态后即使重新验证也不会改变该状态。该访问是长期禁止的，并且与应用逻辑密切相关（例如没有足够的权限访问该资源）。[^1]</p></blockquote><blockquote><p>通常一下三种场景会返回 403 错误[^2]：</p><ol><li>用户访问只能被内网访问的文件；</li><li>访问禁止目录浏览的目录，例：设置 autoindex off 后访问目录；</li><li>网站禁止特定的用户访问所有内容，例：网站屏蔽某个 ip 访问。</li></ol></blockquote><h3 id="是什么原因导致的？"><a href="#是什么原因导致的？" class="headerlink" title="是什么原因导致的？"></a>是什么原因导致的？</h3><p>初步判断是文件权限的问题，因为我其他配置都是按照教程来的，也反复试了好几次还是 403。那么接下来开始解决问题吧。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先打开 Serv00 的面板，在打开自带的文件管理器。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2edd404d82.png"                      alt="就是侧边栏这个"                ><figcaption>就是侧边栏这个</figcaption></figure></p><p>并选择主目录下的 <code>domains</code> 文件夹（如果你没有安装在 <code>domains</code> 文件夹内，请以实际为准，变通一下），再点上面的 <code>More</code>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2ee6e25fd1.png"                                     ></p><p>在点击 <code>File Permissions</code> 给文件夹授予权限。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2ef1bb212d.png"                                     ></p><p>把权限全部点上，别忘了勾选 <code>Apply recursively?</code>（这样可以给文件夹内的所有文件也一并授予权限）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2ef8d3f83c.png"                                     ></p><p>虽然权限已经授予了，但是在兰空图床默认设置下，图片路径命名规则是 <code>年/月/日</code>，也就是说，你第二天上传图片，它又会创建一个新的文件夹，经过测试发现，新的文件夹的权限依然不足，这就导致第二天的图片无法访问。这样一天天的太麻烦了，别着急，且看下一步。</p><p>我们来的 <code>你的域名/admin/groups</code>，在里面选择你要更改的角色组（若没有其他特殊要求，就改 <code>系统默认组&amp;游客组</code>，毕竟建这东西也是给自己用的），点击这个编辑：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2f238c2d21.png"                                     ></p><p>把 <code>路径命名规则</code> 改成空值，这样兰空图床就不会每天更改路径了。（<strong>别忘了点右下角保存</strong>）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2f26ead65a.png"                                     ></p><p>现在问题就得到了解决。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>虽然 Serv00 有 3G 的储存空间，但是可能还会出现不够用的情况，而且搭建图床是违反 <a class="link"   href="https://www.serv00.com/tos" >tos <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的[^3][^4]。个人建议还是改用其他储存策略比较好。</p><blockquote><ol start="4"><li>In the case of installing on the user’s website software that makes excessive use of Serv00.com server resources, e.g. photo hosting, files, scripts for downloading files from other websites, etc., the website owner reserves the right to block the account.[^4]<br>(<em>如果用户在网站上安装过度使用 Serv00.com 服务器资源的软件，例如照片托管、文件、从其他网站下载文件的脚本等，网站所有者保留封锁该帐户的权利。</em>)</li></ol></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[^1]: <a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/403" >403 Forbidden <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>[^2]: <a class="link"   href="https://blog.csdn.net/m0_48506962/article/details/107918903" >为什么会出现 403 Forbidden 错误？三分钟教你快速解决问题！ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>[^3]: <a class="link"   href="https://linux.do/t/topic/81730/5?u=imtgs" >https://linux.do/t/topic/81730/5?u=imtgs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>[^4]: <a class="link"   href="https://www.serv00.com/tos" >Terms of Service <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近我折腾起了 &lt;a class=&quot;link&quot;   href=&quot;https://www.serv00.com/&quot; &gt;Serv00 &lt;i cl</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="其他" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Serv00" scheme="http://example.com/tags/Serv00/"/>
    
    <category term="Lsky Pro" scheme="http://example.com/tags/Lsky-Pro/"/>
    
  </entry>
  
  <entry>
    <title>【编辑中】 VSCode 优化指北（设置、美化、插件）</title>
    <link href="http://example.com/ba15924.md/"/>
    <id>http://example.com/ba15924.md/</id>
    <published>2024-08-18T01:43:42.000Z</published>
    <updated>2024-09-16T08:32:46.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道 VSCode 是一款非常强大的编辑器，可以满足我们大部分的需求，而且也可以安装很多插件来扩展它的功能（**<em>VSCode Yes!</em>**）。但是它仍然有许多可以优化的地方。比如你吃着火锅唱着歌，电脑突然就崩溃了，而你千辛万苦写的代码却没保存（</p><p>上述案例是可以通过设置自动保存来解决的，让我们开始吧！</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p><strong>工欲善其事，必先利其器</strong>。其实 VSCode 有很多实用的设置是没有默认打开的，你可以按需打开。一个个搜索配置有点浪费时间，如果你太懒，也可以看之后的<a href="#%E6%87%92%E4%BA%BA%E6%96%B9%E6%A1%88">懒人方案</a>快速开启这些设置。</p><h3 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h3><p>在设置里（<del>不会还有人不知道设置怎么打开吧</del>）搜索 <code>files.autoSave</code>，选择 <code>afterDelay</code>，这样每当你修改代码时，VSCode 都会马上帮你保存。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1708e8635e.png"                                     ></p><p>我们还可以设置自动保存的延迟，如果你在延迟内再次改动，就不会保存，默认为 1000ms，也就是 1 秒的时间，你可以按需调整。搜索 <code>files.autoSaveDelay</code>，输入你想要的延迟即可，我这里设置为了 500ms。在一些修改代码后要马上测试的情况下，不建议把数值改的很大。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1726f88532.png"                                     ></p><h3 id="自动检测文本编码类型"><a href="#自动检测文本编码类型" class="headerlink" title="自动检测文本编码类型"></a>自动检测文本编码类型</h3><p>开启这个功能后，VSCode 会在打开文件时自动判断文件编码类型，这样便不用担心文件打开是乱码了。搜索 <code>files.autoGuessEncoding</code>，勾选即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c193e3c3317.png"                                     ></p><h3 id="开启一些动画"><a href="#开启一些动画" class="headerlink" title="开启一些动画"></a>开启一些动画</h3><p>VSCode 为了提升性能，关闭了一些动画，但是我们可以开启它，这样看起来反而会更加丝滑。直接在设置里搜索 <code>smooth</code>，像我这样开启即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c197ab428fe.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c198a474137.gif"                      alt="动画演示"                ><figcaption>动画演示</figcaption></figure></p><p>可以看到光标的位移等效果变得丝滑流畅。</p><h3 id="快捷缩放"><a href="#快捷缩放" class="headerlink" title="快捷缩放"></a>快捷缩放</h3><p>开启这个设置后，我们便可以使用 <code>Ctrl</code> 加鼠标滚轮快捷缩放代码字体大小。搜索 <code>editor.mouseWheelZoom</code> 勾选即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1a51142b10.png"                                     ></p>  <div class="note p-4 mb-4 rounded-small info">    <p>温馨提示：重启 VSCode 即可恢复原来的大小。</p>  </div><h3 id="自动格式化"><a href="#自动格式化" class="headerlink" title="自动格式化"></a>自动格式化</h3><p>接下来三个设置可以帮我们自动格式化代码，在美化代码的同时省去一些时间。搜索 <code>editor.formatOn</code> 勾选以下三个设置即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1a8667b291.png"                                     ></p><p>这样我们在粘贴别人的代码、保存文件、换行时，VSCode 都会自动格式化代码。但是经过我测试发现，这个自动格式化与自动保存搭配时，自动保存后似乎不会格式化（也不知道是不是错觉）。</p><h3 id="自动折行"><a href="#自动折行" class="headerlink" title="自动折行"></a>自动折行</h3><p>搜索 <code>editor.wordWrap</code>，选择 <code>on</code>，这样在代码过长时，就会自动折行，这样可以方便我们阅读。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1ae7e5760e.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1aeedd99de.png"                      alt="效果如上"                ><figcaption>效果如上</figcaption></figure></p><p>虽是自动折行，但其实不会对代码有修改，只是在外观上进行了折行（<del>是个人都知道吧</del>）。</p><h3 id="括号块参考线"><a href="#括号块参考线" class="headerlink" title="括号块参考线"></a>括号块参考线</h3><p>搜索 <code>editor.guides.bracketPairs</code>，选择 <code>true</code> 即可。这样就会在两个括号之间显示一条竖线，方便我们辨认括号间的关系。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1b2388a59b.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/2024/08/18/66c1b279b9a99.png"                      alt="效果如上"                ><figcaption>效果如上</figcaption></figure></p><h3 id="代码补全相关"><a href="#代码补全相关" class="headerlink" title="代码补全相关"></a>代码补全相关</h3><p>搜索 <code>editor.acceptSuggestionOnEnter</code> 设置为 <code>smart</code>，这样在代码补全时会自动判断我们的回车是接受建议还是换行。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c29dd7ebedd.png"                                     ></p><p>搜索 <code>editor.suggestSelection</code> 设置为 <code>recentlyUsed</code>，这样在代码补全的时候，会优先显示你最近接受的补全。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2a568575b0.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c2a724d0153.gif"                      alt="效果如上"                ><figcaption>效果如上</figcaption></figure></p><p>各位也可以根据自己的喜好灵活调整。</p><h3 id="懒人方案"><a href="#懒人方案" class="headerlink" title="懒人方案"></a>懒人方案</h3><p>按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开命令面板，输入 <code>settings.json</code> 并选择 <code>首选项：打开用户设置(JSON)</code>[^1]，然后复制张贴一下内容。如果你想了解更改了哪些内容，请看前文，不需要的可以删除。</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afterDelay&quot;</span><span class="punctuation">,</span> <span class="comment">// 自动保存</span></span><br><span class="line">  <span class="attr">&quot;files.autoSaveDelay&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span> <span class="comment">// 自动保存的延迟</span></span><br><span class="line">  <span class="attr">&quot;files.autoGuessEncoding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 自动检测文本编码类型</span></span><br><span class="line">  <span class="attr">&quot;editor.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 以下 5 个为动画设置</span></span><br><span class="line">  <span class="attr">&quot;editor.cursorSmoothCaretAnimation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.list.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smooth&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.mouseWheelZoom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 快捷缩放</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 以下 3 个为格式化设置</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span> <span class="comment">// 自动折行</span></span><br><span class="line">  <span class="attr">&quot;editor.guides.bracketPairs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 括号块参考线</span></span><br><span class="line">  <span class="attr">&quot;editor.acceptSuggestionOnEnter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smart&quot;</span><span class="punctuation">,</span> <span class="comment">// 这两个跟代码补全有关</span></span><br><span class="line">  <span class="attr">&quot;editor.suggestSelection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;recentlyUsed&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><hr><p>其实建议大家可以对设置里的每一项改一下，试一下，这样才能把 vscode 调校成自己最喜欢的样子，不一定要全部照搬上面的设置，而且上面的设置只是我觉得大部分人用得到的，更多的还是适合自己的才好。</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p><strong>爱美之心，人皆有之</strong>。适当的美化可以让我们心情愉悦，事半功倍。在 VSCode 上的美化，只能对主题和图标这两个地方下手，一些好的主题和图标都被打包成了插件，我们直接通过安装插件的方式就可以更改他们。主题就是对整个 VSCode 界面的一些颜色和外观进行调整，而图标指的并非 VSCode 的图标（<del>谁会美化这个</del>），而是 VSCode 内文件、文件夹名旁边的图标，方便我们快速辨识文件的语言和用处。</p><p>下面推荐一些我个人觉得还好的主题和图标。由于每个人的审美不一样，所以我就不过多评价，大家可以一个一个试一下，选出自己最喜欢的。</p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>一般安装好了主题插件以后就会弹出一个窗口供你选择样式，回车即可应用。如果你没有注意，可以按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开命令面板，输入 <code>theme</code> 并选择 <code>首选项：颜色主题</code> 回车，再选择你要更改的主题。</p><h4 id="One-Dark-Pro"><a href="#One-Dark-Pro" class="headerlink" title="One Dark Pro"></a><a class="link"   href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme" >One Dark Pro <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>一款很优秀的暗色主题，我也在用。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c6a93d68d7e.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c6a9db94a8f.png"                      alt="效果"                ><figcaption>效果</figcaption></figure></p><h4 id="GitHub-Theme"><a href="#GitHub-Theme" class="headerlink" title="GitHub Theme"></a><a class="link"   href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme" >GitHub Theme <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>由 GitHub 官方开发的 GitHub 风格的主题，有亮色也有暗色。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c6abf3794e6.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c6ac6c458b2.png"                      alt="效果"                ><figcaption>效果</figcaption></figure></p><h4 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a><a class="link"   href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme" >Material Theme <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>也是一款很优先的主题，有五种样式可以选择。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c6b0a8dd2b5.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c6b0f177048.png"                      alt="效果"                ><figcaption>效果</figcaption></figure></p><hr><p>还有其他好的主题这里就不在展示了，看多了有点眼花缭乱。如果你对上面的三个不满意，也可以看看下面几篇文章：</p><ol><li><a class="link"   href="https://blog.csdn.net/qq_44866828/article/details/137257759" >2024 年最受欢迎的 19 个 VS Code 主题排行榜 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://juejin.cn/post/7005020214114910216" >20 个我最喜欢的 VS Code 主题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ol><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>同样的，一般安装好了主题插件以后就会弹出一个窗口供你选择样式，回车即可应用。如果你没有注意，可以按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开命令面板，输入 <code>theme</code> 并选择 <code>首选项：文件图标主题</code> 回车，再选择你要更改的主题。</p><h4 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a><a class="link"   href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" >Material Icon Theme <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>Material 风格的图标主题，图标做的非常齐全。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c825a47ed0b.png"                                     ></p><p>由于图标过多这里就不放图片了，大家可以自己安装看一看。</p><h4 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a><a class="link"   href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons" >vscode-icons <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>这个主题好像还是 VSCode 官方开发的，VSCode 风格，差不多是 VSCode 默认图标的扩展版吧。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c82744ace54.png"                                     ></p><h4 id="不要图标"><a href="#不要图标" class="headerlink" title="不要图标"></a>不要图标</h4><p>是的你没有听错，你也可以选择不要图标，<del>或许有些特殊癖好的人会这么想吧</del>。可以按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开命令面板，输入 <code>theme</code> 并选择 <code>首选项：文件图标主题</code> 回车，再选择 <code>无</code>，即可禁用图标，效果如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.xshaw.top/i/66c8282cb459c.png"                                     ></p><hr><p>如果你对上面的三个不满意，也可以看看下面这篇文章：</p><ul><li><a class="link"   href="https://juejin.cn/post/7247569496696389691" >🗂 让你的 VSCode 文件图标更好看的 10 个文件图标主题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><strong>磨刀不误砍柴工</strong>。众所周知我们的 VSCode 就是靠插件系统起家的，所以他的扩展能力非常强，极大的便利了我们的开发，那么接下来就到了插件推荐环节，我会把我觉得好用的插件都分享出来。但是需要注意的是，过多的插件会导致 VSCode 卡顿不流畅、打开速度慢等现象，建议不要添加一些平时用不着、不感兴趣的插件。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="#%E8%AE%BE%E7%BD%AE">设置</a>章节部分参考了<a class="link"   href="https://www.bilibili.com/video/BV1Hd4y1o7CN/?share_source=copy_web&vd_source=b4e65cf2980ed2725b978782cf758127" >【教程】vscode 优化体验篇（推荐设置 &amp;&amp; 推荐插件） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>[^1]: <a class="link"   href="https://blog.csdn.net/weixin_43798960/article/details/109362907" >VSCode 怎么打开 settings.json 文件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们都知道 VSCode 是一款非常强大的编辑器，可以满足我们大部分的需求，而且也可以安装很多插件来扩展它的功能（**&lt;em&gt;VSCode </summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="优化/美化" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/%E4%BC%98%E5%8C%96-%E7%BE%8E%E5%8C%96/"/>
    
    
    <category term="VSCode" scheme="http://example.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>搭建 ESP8266 NodeMCU + Arduino 开发环境</title>
    <link href="http://example.com/6287fe0b.md/"/>
    <id>http://example.com/6287fe0b.md/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2024-09-16T08:44:49.889Z</updated>
    
    <content type="html"><![CDATA[<p>暑假闲得无聊在淘宝上买了个 ESP8266 NodeMCU 开发板，主要是它性能又好又不贵，信泰微电子这家店的 ESP8266 有时候活动只要 6 块钱就能拿下。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa308e871b83018a2943bd.png"                                     ></p><p>拿到手上就急着想试试了，看了看评论好像需要用 Arduino 开发（还需要学 C 语言 555 ）</p><h2 id="安装-Arduino"><a href="#安装-Arduino" class="headerlink" title="安装 Arduino"></a>安装 Arduino</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>前往官方<a class="link"   href="https://www.arduino.cc/en/software" >下载页面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载最新版即可，一般只需要下载最新版的 <code>Win 10 and newer, 64 bits</code>，下好后双击打开一直下一步就行。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa30b9871b83018a29d649.png"                                     ></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>一般的 Linux 发行版本依然需要前往官方<a class="link"   href="https://www.arduino.cc/en/software" >下载页面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，只需要下载最新版的 <code>AppImage 64 bits (X86-64)</code>，双击打开即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa30cf871b83018a2a226c.png"                                     ></p><p>而 Arch 可以直接使用 yay 安装</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S arduino-ide-bin</span><br></pre></td></tr></table></figure></div><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>依然需要前往官方<a class="link"   href="https://www.arduino.cc/en/software" >下载页面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，按照对应条件下载安装包。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa30ee871b83018a2a9889.png"                                     ></p><h2 id="安装-CH340-驱动"><a href="#安装-CH340-驱动" class="headerlink" title="安装 CH340 驱动"></a>安装 CH340 驱动</h2><h3 id="Windows-MacOS"><a href="#Windows-MacOS" class="headerlink" title="Windows &amp; MacOS"></a>Windows &amp; MacOS</h3><p>Windows 官方驱动：<a class="link"   href="https://www.wch.cn/download/CH341SER_EXE.html" >https://www.wch.cn/download/CH341SER_EXE.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>MacOS 官方驱动：<a class="link"   href="https://www.wch.cn/download/CH341SER_MAC_ZIP.html" >https://www.wch.cn/download/CH341SER_MAC_ZIP.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>较新的 Linux 内核已经内置了 CH340 的驱动，无需自行安装</p><h2 id="配置-Arduino"><a href="#配置-Arduino" class="headerlink" title="配置 Arduino"></a>配置 Arduino</h2><p>默认的 Arduino 不自带 ESP8266 的开发环境，需要手动安装。这一步是通用的，不区分操作系统。</p><p>首先先设置语言到中文，进入 Arduino，依次点击 <code>File =&gt; Preferences</code>，或者直接 Ctrl + , ，在 <code>Language</code> 选项中选择 <code>中文（简体）</code>，在点右下角的 <code>OK</code>，重新加载后便是中文界面了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa312f871b83018a2b7eb8.png"                                     ></p><p>接下来在 <code>首选项</code> 的 <code>其他开发版管理器地址</code> 项中填入 <code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code>，然后 <code>确认</code>。</p><p>然后我们点击 <code>工具 =&gt; 开发板 =&gt; 开发板管理器</code>，并在输入框中输入 <code>ESP8266</code>，点击下面的 <code>安装</code>，等待下载（注意：据相关文献考证，有 99% 的概率会安装失败（，最简单的解决方法就是魔法上网。</p><p>接下来就可以插上你的开发板了，不会还有人不会插数据线吧（</p><p>现在 <code>工具 =&gt; 开发板 =&gt; esp8266</code>，选择 <code>NodeMCU 1.0(ESP-12E Module)</code>，<code>工具 =&gt; 端口</code> 选择唯一的那一个（如果你有两个开发板，建议先拔掉一个，以免搞混）</p><hr><p>如果你目前的操作系统是 Linux，看不见端口是正常现象，解决方法是执行以下命令：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /dev/ttyUSB0</span><br></pre></td></tr></table></figure></div><p>不过每次插上 ESP8266 都需要重新执行（Linux の痛）</p><h2 id="烧入手法（必读！！！）"><a href="#烧入手法（必读！！！）" class="headerlink" title="烧入手法（必读！！！）"></a>烧入手法（必读！！！）</h2><p>仔细观察你会发现，ESP8266 开发板上有两个按钮，分别是 <code>FLASH</code> 和 <code>RST</code>，在即将烧入代码之前，需要按住 <code>FLASH</code> 不松，然后按一下 <code>RST</code> 松手，此时 <code>FLASH</code> 还不能松，这时候点击 Arduino 左上角的<code>-&gt;</code>开始烧入，待到烧入完成后再松开 <code>FLASH</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>安装 ESP8266 开发环境后，Arduino 里会有几个示例文件供我们测试。</p><p>点击 <code>文件 =&gt; 示例 =&gt; ESP8266</code>，选择 <code>Blink</code>，之后按照烧入手法烧入程序，你将看到你的开发板会一直闪烁亮蓝光，此时你已经配置好了，可以继续开发了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;暑假闲得无聊在淘宝上买了个 ESP8266 NodeMCU 开发板，主要是它性能又好又不贵，信泰微电子这家店的 ESP8266 有时候活动只要 6 块钱就能拿下。&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
           </summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="嵌入式" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="ESP8266" scheme="http://example.com/tags/ESP8266/"/>
    
    <category term="Arduino" scheme="http://example.com/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>Noteonline 正式上线</title>
    <link href="http://example.com/6cc079cc.md/"/>
    <id>http://example.com/6cc079cc.md/</id>
    <published>2023-08-15T16:00:00.000Z</published>
    <updated>2024-09-16T08:56:12.837Z</updated>
    
    <content type="html"><![CDATA[  <div class="note p-4 mb-4 rounded-small red icon-padding">    <i class="note-icon fa-solid fa-xmark"></i><p>该项目目前已经停止维护。</p>  </div><p>8 月 15 号，我花了一个下午的时间做了一个类似于<a class="link"   href="https://note.ms/" >Note.ms <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的网站：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa324b871b83018a2f7a76.png"                                     ></p><p>它的名字叫 Noteonline（随便乱取的）。为什么要做呢？看看 Note.ms 现在的局势就知道了，各种脚本盘踞着各个页面，“毁灭计划”成员铺天盖地，稍不注意你的页面就会被清掉，根本来不及备份……</p><p>大丈夫岂能郁郁久居于他人之下！虽然也有其他类似 Note.ms 的网站，但还是自己的好!</p><p>接下来我遇到了一个问题，Github 上类似 Note.ms 的项目使用的都是 php，需要在服务器上部署，但我可是典型的白嫖怪，怎么可能有服务器，只好选择其他办法。正好我以前配置过<a class="link"   href="https://waline.js.org/" >Waline <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>评论系统，对<a class="link"   href="https://leancloud.app/" >LeanCloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>记忆犹深，脑海中便突然浮现出一个想法：能否使用 LeanCloud 来储存页面的数据，只用 Html 和 Js 实现网站功能？</p><p>理论可行，实践不再赘述，最后成功实现，目前功能如下：</p><ol><li>你可以在地址（<code>https://note.xshaw.xyz</code>）后任意添加内容来创建一个页面（不限制任何符号，甚至你还可以创建分页、中文链接，但一些特殊表示除外，比如<code>@info</code>）。</li><li>你可以任何页面中的编辑框里写笔记，你的笔记将会实时存储在云端，之后再访问你编辑过的页面便可再次看到你写的笔记。</li><li>你可以在一个页面的链接后面加上<code>@info</code>（根页面请加<code>/@info</code>）以查看该页面的创建时间、更新时间、更新者的一些信息（ip 地址等，所以请不要试图在这里散播违法内容！）、查看次数、编辑次数等。</li><li>支持夜间模式（其实是 Vue 内置的）。</li><li>统一使用鸿蒙字体（遥遥领先），引入了 <a class="link"   href="https://github.com/vinta/pangu.js" >Pangu.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，刷新页面后会自动分割中英文，优化阅读体验。</li></ol><p>GitHub 仓库：<a class="link"   href="https://github.com/imtgs/Noteonline/" >&#x2F;imtgs&#x2F;Noteonline <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>地址是<a class="link"   href="https://note.xshaw.xyz/" >https://note.xshaw.xyz <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在这里感谢<a class="link"   href="https://vercel.com/" >Vercel <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>提供的免费托管服务</p><p>PPT 功能：</p><ol><li>支持 MD 语法</li><li>暂时想不出别的了</li></ol><p>欢迎在<a class="link"   href="https://note.xshaw.xyz/" >Noteonline <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>讨论区或这里的评论区报告 Bug 和申请新功能！</p>]]></content>
    
    
      
      
    <summary type="html">
  &lt;div class=&quot;note p-4 mb-4 rounded-small red icon-padding&quot;&gt;
    &lt;i class=&quot;note-icon fa-solid fa-xmark&quot;&gt;&lt;/i&gt;&lt;p&gt;该项目目前已经停止维护。&lt;/p&gt;

  &lt;/div&gt;

</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Note.ms" scheme="http://example.com/tags/Note-ms/"/>
    
    <category term="Noteonline" scheme="http://example.com/tags/Noteonline/"/>
    
    <category term="LeanCloud" scheme="http://example.com/tags/LeanCloud/"/>
    
    <category term="Vercel" scheme="http://example.com/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>jsDelivr的替代品：渺软公益 CDN</title>
    <link href="http://example.com/8f913a4e.md/"/>
    <id>http://example.com/8f913a4e.md/</id>
    <published>2023-08-04T16:00:00.000Z</published>
    <updated>2024-09-16T08:54:51.224Z</updated>
    
    <content type="html"><![CDATA[  <div class="note p-4 mb-4 rounded-small red icon-padding">    <i class="note-icon fa-solid fa-xmark"></i><p>该项目目前已经停止维护，所有国内域名停止运行维护(全线切入 CloudFlare)。详见<a class="link"   href="https://cdn.onmicrosoft.cn/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>  </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，jsDelivr 是一个大名鼎鼎的静态资源 cdn 加速平台，它以免费、高速、支持 github 文件的特点而备受欢迎，但是，就目前国内网络环境来看，现在在国内使用它作为 cdn 并不理想，下面是几个 ping 测试结果图：</p><p><figure class="image-caption"><img src="https://pic.imgdb.cn/item/65aa32e0871b83018a31853b.png" alt="三大运营商综合测试，已经有接近1/3的省份瘫痪了"><figcaption>三大运营商综合测试，已经有接近1/3的省份瘫痪了</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa32f9871b83018a31e091.png"                      alt="电信单独测试也不理想"                ><figcaption>电信单独测试也不理想</figcaption></figure></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa3324871b83018a327afe.png"                                     ></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa3354871b83018a332bbc.png"                      alt="联通、移动几乎瘫痪"                ><figcaption>联通、移动几乎瘫痪</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa3371871b83018a339dde.png"                      alt="jsDelivr的另一个服务器在国内也比较慢"                ><figcaption>jsDelivr的另一个服务器在国内也比较慢</figcaption></figure></p><p>综上所述，目前还在用 jsDelivr 的用户应该尽快更换其他 cdn！</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>渺软公益 CDN 正是在上述情况中催生的，以下是<a class="link"   href="https://cdn.onmicrosoft.cn/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的介绍：</p><blockquote><p>在开发者日常的开发和使用中，比如写某些简单的 Demo，或者开发一些小工具，小玩意的时候，总会使用到某些前端的静态库，当然 UNPKG、jsDelivr 这样的网站就是为此而生的。但是我们是一群中国的开发者，为此，国外服务商提供的种种服务让我们的网站体验一次次的降级，于是更多的静态资源被放在源站上，但是这仍然解决不了静态资源变慢的问题。于是，本项目出现了，由私人搭建的备案域名来使用 Dogecloud&nbsp;CDN，为开发者提供一个高速简单，开箱即用的公益 CDN，本项目的宗旨是：限制更少，更简单，只为开发 Just for Developers</p></blockquote><p>这是一款免费的 cdn，由<a class="link"   href="https://icodeq.com/2022/5c18919d3591/index.html" >Zkeq <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>大佬搭建，支持回源到 jsDelivr、UNPKG 和 cdnjs 上的任意内容，而且目前的请求限制高达单个域名<code>64GB/24h</code>！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa3390871b83018a341528.jpg"                                     ></p><p>而且速度也是相当快，以下为 ping 测试结果：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa33a9871b83018a347d6b.png"                                     ></p><p>全绿！</p><h2 id="替换方法"><a href="#替换方法" class="headerlink" title="替换方法"></a>替换方法</h2><p>替换方法非常简单，将你博客或项目中引用的 jsDelivr、UNPKG 或 cdnjs 的 cdn 链接的域名换成渺软公益 CDN 的就行，具体对照下表：</p><table><thead><tr><th align="center">cdn 平台</th><th align="center">跟换域名</th></tr></thead><tbody><tr><td align="center">jsDelivr</td><td align="center"><a class="link"   href="https://jsd.onmicrosoft.cn/" >https://jsd.onmicrosoft.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td></tr><tr><td align="center">UNPKG</td><td align="center"><a class="link"   href="https://npm.onmicrosoft.cn/" >https://npm.onmicrosoft.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td></tr><tr><td align="center">cdnjs</td><td align="center"><a class="link"   href="https://cdnjs.onmicrosoft.cn/" >https://cdnjs.onmicrosoft.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td></tr></tbody></table><p>比如我要使用渺软公益 CDN 来引用 jsDelivr 上的 jQuery，我就应该把<code>https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.min.js</code>换成<code>https://jsd.onmicrosoft.cn/npm/jquery@3.6.4/dist/jquery.min.js</code></p><p>目前已经有许多小伙伴开始使用它了，就目前可观测数据来看，甚至有一个小时的 jsDelivr 请求数高达<code>5w+</code>次，我的博客目前也已开始使用。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa32ba871b83018a30fcf1.png"                                     ></p><p>现在就看这个 cdn 能用多久了，虽然是公益项目，但也是有规定的，Zkeq 明确表示请不要用它来托管私人静态图片、私人字体文件等大流量资源，还请大家不要滥用此 cdn，以免不必要的损失！</p>]]></content>
    
    
      
      
    <summary type="html">
  &lt;div class=&quot;note p-4 mb-4 rounded-small red icon-padding&quot;&gt;
    &lt;i class=&quot;note-icon fa-solid fa-xmark&quot;&gt;&lt;/i&gt;&lt;p&gt;该项目目前已经停止维护，所有国内域名停止运行维护(全线切</summary>
      
    
    
    
    <category term="分享" scheme="http://example.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    <category term="工具" scheme="http://example.com/categories/%E5%88%86%E4%BA%AB/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="jsDelivr" scheme="http://example.com/tags/jsDelivr/"/>
    
    <category term="CDN" scheme="http://example.com/tags/CDN/"/>
    
    <category term="渺软公益" scheme="http://example.com/tags/%E6%B8%BA%E8%BD%AF%E5%85%AC%E7%9B%8A/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个Hexo主题：Stellar</title>
    <link href="http://example.com/2d84c422.md/"/>
    <id>http://example.com/2d84c422.md/</id>
    <published>2023-08-02T16:00:00.000Z</published>
    <updated>2024-09-16T08:47:39.939Z</updated>
    
    <content type="html"><![CDATA[<p>在某次虫洞穿越中（其实就是<a class="link"   href="https://foreverblog.cn/" >十年之约 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的搞的<a class="link"   href="http://foreverblog.cn/go.html" >虫洞 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，无聊的时候就用它在许多人的博客之间穿梭，你可以看到各式各样的博客、主页），我进入了<a class="link"   href="https://blog.xsot.cn/" >星辰日记 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这个博客，一下子就被这种样式所吸引：</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://pic.imgdb.cn/item/65aa33f4871b83018a35902e.png"                      alt="星辰日记"                ><figcaption>星辰日记</figcaption></figure></p><p>后来……</p><p>我便抛弃了 VitePress，又用上了 Hexo（</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这款主题叫<a class="link"   href="https://github.com/xaoxuu/hexo-theme-stellar" >Stellar <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（会看标题的都知道了吧），好像还和著名 Hexo 主题 Volantis 是一个作者，而且这款主题目前好像还没什么人气。</p><p>这款主题最吸引我的地方就是它的侧边栏，简洁大气，不像<a class="link"   href="https://butterfly.js.org/" >Butterfly <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>那样说不出的繁杂。</p><p>而且这种侧边栏巧妙地将导航栏结合，且可以高度自定义化，大量的空间留白和圆角给人一种舒适感。</p><p>其他的该有它都有，自带的标签甚至高达 32 种，自定义程度也极高，同时还独创了其它 Hexo 主题所没有的 Wiki 系统（虽然目前我还用不到）</p><p>官方文档：<a class="link"   href="https://xaoxuu.com/wiki/stellar/#start" >https://xaoxuu.com/wiki/stellar/#start <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><del>稍后我可能会出一期或一系列详细的 Hexo 搭建教程和这个主题的相关美化，敬请关注！</del>（现在我已经更换到了 Hugo，不想写了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在某次虫洞穿越中（其实就是&lt;a class=&quot;link&quot;   href=&quot;https://foreverblog.cn/&quot; &gt;十年之约 &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;的搞的</summary>
      
    
    
    
    <category term="分享" scheme="http://example.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    <category term="主题" scheme="http://example.com/categories/%E5%88%86%E4%BA%AB/%E4%B8%BB%E9%A2%98/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Stellar" scheme="http://example.com/tags/Stellar/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/4a17b156.md/"/>
    <id>http://example.com/4a17b156.md/</id>
    <published>2023-07-31T16:00:00.000Z</published>
    <updated>2024-09-16T06:08:02.126Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>建博客快有两年了，期间换了很多主题、域名，尝试过自己写一个博客网站，遇到了许许多多的困难、也曾丢失了很多博客。</p><p>以下是近期改动:</p><ul><li>（2023 年 6 月 20 号）由于域名（<code>xshaw.top</code>）过期，我被迫又用上了 GitHub Pages 给的域名，也就是现在用的<code>imtgs.github.io</code>，我思来想去，决定再次用上 Jakyll，并且又用了曾经用过的主题 TMaize，这款主题曾经陪伴了我一些时光，久违了！</li><li>（2023 年 7 月 23 号）我正在摸索安装 archlinux，找到了一个文档网站，进去一眼就被这页面所诱惑，这不就是搭建博客的最好模板吗？！找了半天，终于知道这是用 VitePress 生成的，我迫不及待开始研究它，<del>现在你看到的网页就是由它生成的</del>。想装 arch 的可以看看这个网站，<a class="link"   href="https://arch.icekylin.online/" >archlinux 简明指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，内容也很不错！</li><li>（2023 年 8 月 2 日）由于我这人爱折腾，VitePress 又过于文档化，我决定用上以前用过的 Hexo 来生成我的博客。</li><li>（时间未知）不知道为何用 Hexo 生成的博客文章列表不显示了，我思来想去决定试一试 Hugo。</li><li>（时间未知）用上了 VuePress，使用 reco 作为主题。</li><li>（2024 年 1 月 18 日）用回了 Hexo，使用 butterfly 作为主题。</li><li>（2024 年 8 月）使用 <a class="link"   href="https://github.com/fluid-dev/hexo-theme-fluid" >Fluid <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，更换域名为 <code>xshaw.top</code>。</li><li>（2024 年 8 月 24 号）换回了 Hugo，使用 PaperMod 做主题，自己稍微修改了一下。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Js&quot;&gt;&lt;figure class=&quot;iseeu highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
    <category term="Jakyll" scheme="http://example.com/tags/Jakyll/"/>
    
    <category term="Arch" scheme="http://example.com/tags/Arch/"/>
    
    <category term="VitePress" scheme="http://example.com/tags/VitePress/"/>
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Hugo" scheme="http://example.com/tags/Hugo/"/>
    
  </entry>
  
</feed>
